version: '3.8'

services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.7
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      # - type: volume
      #   source: elasticsearch
      #   target: /usr/share/elasticsearch/data
    networks:
      - elastic-markov
    healthcheck:
      test: "curl -f http://localhost:9200 || exit 1"
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.7
    container_name: logstash
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    ports:
      - "5044:5044"  # default beats
      - "9600:9600"  # web API
    volumes:
      # - ./logstash/pipeline:/usr/share/logstash/pipeline/
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    networks:
      - elastic-markov
    healthcheck:
      test: "curl -f http://localhost:9600 || exit 1"
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.7
    container_name: kibana
    depends_on:
      - elasticsearch
      - logstash
    # environment:
    #   - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "5601:5601"
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    networks:
      - elastic-markov
    healthcheck:
      test: "curl -f http://localhost:5601 || exit 1"
    restart: unless-stopped

  filebeat:
    build:
      context: ./filebeat
      dockerfile: Dockerfile
    image: elastic-markov-filebeat
    container_name: filebeat
    depends_on:
      - elasticsearch
      - logstash
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/usr/share/dockerlogs/data:ro
    networks:
      - elastic-markov
    restart: 'no'

  markov-train:
    build:
      context: ./markov/train
      dockerfile: Dockerfile
    image: elastic-markov-train
    container_name: markov-train
    depends_on:
      - filebeat
    volumes:
      - ./markov/train/data/:/usr/src/app/data
    networks:
      - elastic-markov
    # NOTE: train service only runs if data is not detected

  markov-gen:
    build:
      context: ./markov/gen
      dockerfile: Dockerfile
    image: elastic-markov-gen
    container_name: markov-gen
    depends_on:
      - filebeat
    volumes:
      - ./markov/train/data/:/usr/src/app/data:ro
    networks:
      - elastic-markov
    restart: unless-stopped

networks:
  elastic-markov:
    driver: bridge

# volumes:
#   elasticsearch: